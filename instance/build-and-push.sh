#!/bin/bash

# Build and push code-server Docker image with SOCI-compatible compression
# 
# This script builds the code-server image using zstd-variant of eStargz compression,
# which is compatible with AWS SOCI (Seekable OCI) indexing for faster container startup.
# 
# Why zstd-variant eStargz?
# - Standard zstd compression is not compatible with SOCI indexing
# - zstd-variant of eStargz provides both zstd compression benefits and seekability
# - This enables lazy loading of container layers and faster startup times

set -e

# Configuration - use environment variables
AWS_REGION=${AWS_REGION:-"your-aws-region"}
AWS_PROFILE=${AWS_PROFILE:-"default"}
REPOSITORY_NAME="prequel-dev-code-server"

# Get account ID using current AWS configuration
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
ECR_URI="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${REPOSITORY_NAME}"

echo "Building code-server Docker image..."
echo "Repository: $ECR_URI"

# Login to ECR
echo "Logging in to ECR..."
aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI

# Build and push the Docker image for AMD64 (ECS Fargate architecture) with SOCI-compatible compression
echo "Building and pushing Docker image with SOCI-compatible compression..."

# Variable to track which compression was used
COMPRESSION_USED=""

# Try zstd-variant eStargz first
echo "üîÑ Attempting build with zstd-variant eStargz compression..."
set +e  # Temporarily disable exit on error for testing
docker buildx build \
  --platform=linux/amd64 \
  --output type=image,name="$ECR_URI:latest",push=true,compression=zstd:estargz,force-compression=true,oci-mediatypes=true \
  .
ZSTD_RESULT=$?
set -e  # Re-enable exit on error

if [ $ZSTD_RESULT -eq 0 ]; then
  echo "‚úÖ Built with zstd-variant eStargz compression"
  COMPRESSION_USED="zstd-variant eStargz"
else
  echo "‚ùå zstd-variant eStargz failed, trying standard eStargz..."
  
  set +e  # Temporarily disable exit on error for testing
  docker buildx build \
    --platform=linux/amd64 \
    --output type=image,name="$ECR_URI:latest",push=true,compression=estargz,force-compression=true,oci-mediatypes=true \
    .
  ESTARGZ_RESULT=$?
  set -e  # Re-enable exit on error
  
  if [ $ESTARGZ_RESULT -eq 0 ]; then
    echo "‚úÖ Built with standard eStargz compression (gzip-based)"
    COMPRESSION_USED="standard eStargz (gzip-based)"
  else
    echo "‚ùå eStargz failed, building with gzip compression for SOCI compatibility..."
    docker buildx build \
      --platform=linux/amd64 \
      --output type=image,name="$ECR_URI:latest",push=true,compression=gzip,oci-mediatypes=true \
      .
    echo "‚úÖ Built with gzip compression (SOCI compatible)"
    COMPRESSION_USED="gzip (SOCI compatible)"
  fi
fi

echo ""
echo "‚úÖ Code-server image built and pushed successfully with SOCI-compatible compression!"
echo "Image URI: $ECR_URI:latest"
echo "üì¶ Compression: $COMPRESSION_USED"
echo ""
echo "üöÄ SOCI index will be automatically generated by AWS Lambda after push!"
echo "üí° This image format is optimized for lazy loading and SOCI indexing."